head	1.3;
access;
symbols;
locks
	kyledewey:1.3; strict;
comment	@# @;


1.3
date	2011.06.08.04.25.53;	author kyledewey;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.25.20.14.06;	author kyledewey;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.26.04.04.04;	author kyledewey;	state Exp;
branches;
next	;


desc
@Matchers that perform operations on numbers.
@


1.3
log
@Now conforms to the new Param interface.
@
text
@/*
 * Arithmetic.scala
 *
 * Version:
 *     $Id: Arithmetic.scala,v 1.2 2011/05/25 20:14:06 kyledewey Exp $
 *
 * Revisions:
 *      $Log: Arithmetic.scala,v $
 *      Revision 1.2  2011/05/25 20:14:06  kyledewey
 *      Made it so the class name is also taken as a parameter.
 *
 *      Revision 1.1  2010/06/26 04:04:04  kyledewey
 *      Initial revision
 *
 *
 */

package sentinel.model.matcher

import sentinel.model._
import sentinel.model.InstanceFactory._

/**
 * Holds helper functions for arithmetic routines.
 * @@author Kyle Dewey
 */
object Arithmetic {
  def toInts( params: Seq[ Param ] ) =
    params.map( ( p: Param ) =>
      new java.lang.Long( p.sentIntValue ) )
  def toReals( params: Seq[ Param ] ) =
    params.map( ( p: Param ) =>
      new java.lang.Double( p.sentRealValue ) )
}

import Arithmetic._

/**
 * Determines if all the given integers are the same as each other.
 * @@param className The name of the class
 * @@param params Params to the matcher
 * <ul><li>"integers": The integers to test for equality</li></ul>
 * @@author Kyle Dewey
 */
class IntEqual( val className: String,
	        val params: Seq[ NamedParam ] ) extends Matcher {
  private val integers = asArray( "integers", params )

  /**
   * Determines if all the given integers are equal to each other
   * @@return true if they are all equal, else false
   */
  override def matches() =
    Matcher.allEqual( toInts( integers ) )
}

/**
 * Determines if all the given integers are different from each other.
 * @@param className The name of the class
 * @@param params Params to the matcher
 * <ul><li>"integers": The integers to test for non-equality</li></ul>
 * @@author Kyle Dewey
 */
class IntNotEqual( val className: String,
		   val params: Seq[ NamedParam ] ) extends Matcher {
  private val integers = asArray( "integers", params )

  /**
   * Determines if all the given integers are not equal to each other.
   * @@return true if they are all different, else false
   */
  override def matches() =
    Matcher.allDifferent( toInts( integers ) )
}

/**
 * Determines if all the given integers are monotonically increasing.
 * In other words, something like 1 > 2 > 3
 * @@param className The name of the class
 * @@param Params params to the matcher
 * <ul><li>"integers": The integers to test</li></ul>
 * @@author Kyle Dewey
 */
class IntGreater( val className: String,
		  val params: Seq[ NamedParam ] ) extends Matcher {
  private val integers = asArray( "integers", params )

  /**
   * Determines if all the given integers are monotonically increasing
   * @@return true if they are increasing, else false
   */
  override def matches() =
    Matcher.allGreater( toInts( integers ) )
}

/**
 * Determines if all the given integers are monotonically decreasing.
 * In other words, something like 1 > 2 > 3
 * @@param className The name of the class
 * @@param Params params to the matcher
 * <ul><li>"integers": The integers to test</li></ul>
 * @@author Kyle Dewey
 */
class IntLess( val className: String,
	       val params: Seq[ NamedParam ] ) extends Matcher {
  private val integers = asArray( "integers", params )

  /**
   * Determines if all the given integers are monotonically decreasing
   * @@return true if they are decreasing, else false
   */
  override def matches() =
    Matcher.allLess( toInts( integers ) )
}

class IntLessOrEqual( val className: String,
		      val params: Seq[ NamedParam ] ) extends Matcher {
  private val integers = asArray( "integers", params )
  override def matches() =
    Matcher.allLessOrEqual( toInts( integers ) )
}

class IntGreaterOrEqual( val className: String,
			 val params: Seq[ NamedParam ] ) extends Matcher {
  private val integers = asArray( "integers", params )
  override def matches() =
    Matcher.allGreaterOrEqual( toInts( integers ) )
}

/**
 * Determines if all the given reals are the same as each other.
 * @@param className The name of the class
 * @@param params Params to the matcher
 * <ul><li>"reals": The reals to test for equality</li></ul>
 * @@author Kyle Dewey
 */
class RealEqual( val className: String,
		 val params: Seq[ NamedParam ] ) extends Matcher {
  private val reals = asArray( "reals", params )

  /**
   * Determines if all the given reals are equal to each other
   * @@return true if they are all equal, else false
   */
  override def matches() =
    Matcher.allEqual( toReals( reals ) )
}

/**
 * Determines if all the given reals are different from each other.
 * @@param className The name of the class
 * @@param params Params to the matcher
 * <ul><li>"reals": The reals to test for non-equality</li></ul>
 * @@author Kyle Dewey
 */
class RealNotEqual( val className: String,
		    val params: Seq[ NamedParam ] ) extends Matcher {
  private val reals = asArray( "reals", params )

  /**
   * Determines if all the given reals are not equal to each other.
   * @@return true if they are all different, else false
   */
  override def matches() =
    Matcher.allDifferent( toReals( reals ) )
}

/**
 * Determines if all the given reals are monotonically increasing.
 * In other words, something like 1 > 2 > 3
 * @@param className The name of the class
 * @@param Params params to the matcher
 * <ul><li>"reals": The reals to test</li></ul>
 * @@author Kyle Dewey
 */
class RealGreater( val className: String,
		   val params: Seq[ NamedParam ] ) extends Matcher {
  private val reals = asArray( "reals", params )

  /**
   * Determines if all the given reals are monotonically increasing
   * @@return true if they are increasing, else false
   */
  override def matches() =
    Matcher.allGreater( toReals( reals ) )
}

/**
 * Determines if all the given reals are monotonically decreasing.
 * In other words, something like 1 > 2 > 3
 * @@param className The name of the class
 * @@param Params params to the matcher
 * <ul><li>"reals": The reals to test</li></ul>
 * @@author Kyle Dewey
 */
class RealLess( val className: String,
	        val params: Seq[ NamedParam ] ) extends Matcher {
  private val reals = asArray( "reals", params )

  /**
   * Determines if all the given reals are monotonically decreasing
   * @@return true if they are decreasing, else false
   */
  override def matches() =
    Matcher.allLess( toReals( reals ) )
}

class RealLessOrEqual( val className: String,
		       val params: Seq[ NamedParam ] ) extends Matcher {
  private val reals = asArray( "reals", params )
  override def matches() =
    Matcher.allLessOrEqual( toReals( reals ) )
}

class RealGreaterOrEqual( val className: String,
			  val params: Seq[ NamedParam ] ) extends Matcher {
  private val reals = asArray( "reals", params )
  override def matches() =
    Matcher.allGreaterOrEqual( toReals( reals ) )
}
@


1.2
log
@Made it so the class name is also taken as a parameter.
@
text
@d5 1
a5 1
 *     $Id: Arithmetic.scala,v 1.1 2010/06/26 04:04:04 kyledewey Exp $
d9 3
d24 15
d47 1
a47 1
  private val integers = asArray[ SentInt ]( "integers", params )
d54 1
a54 1
    Matcher.allEqual( integers )
d66 1
a66 1
  private val integers = asArray[ SentInt ]( "integers", params )
d73 1
a73 1
    Matcher.allDifferent( integers )
d86 1
a86 1
  private val integers = asArray[ SentInt ]( "integers", params )
d93 1
a93 1
    Matcher.allGreater( integers )
d106 1
a106 1
  private val integers = asArray[ SentInt ]( "integers", params )
d113 1
a113 1
    Matcher.allLess( integers )
d118 1
a118 1
  private val integers = asArray[ SentInt ]( "integers", params )
d120 1
a120 1
    Matcher.allLessOrEqual( integers )
d125 1
a125 1
  private val integers = asArray[ SentInt ]( "integers", params )
d127 1
a127 1
    Matcher.allGreaterOrEqual( integers )
d139 1
a139 1
  private val reals = asArray[ SentReal ]( "reals", params )
d146 1
a146 1
    Matcher.allEqual( reals )
d158 1
a158 1
  private val reals = asArray[ SentReal ]( "reals", params )
d165 1
a165 1
    Matcher.allDifferent( reals )
d178 1
a178 1
  private val reals = asArray[ SentReal ]( "reals", params )
d185 1
a185 1
    Matcher.allGreater( reals )
d198 1
a198 1
  private val reals = asArray[ SentReal ]( "reals", params )
d205 1
a205 1
    Matcher.allLess( reals )
d210 1
a210 1
  private val reals = asArray[ SentReal ]( "reals", params )
d212 1
a212 1
    Matcher.allLessOrEqual( reals )
d217 1
a217 1
  private val reals = asArray[ SentReal ]( "reals", params )
d219 1
a219 1
    Matcher.allGreaterOrEqual( reals )
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 *     $Id$
d8 4
a11 1
 *      $Log$
d22 1
d27 2
a28 1
class IntEqual( params: Seq[ NamedParam ] ) extends Matcher {
d41 1
d46 2
a47 1
class IntNotEqual( params: Seq[ NamedParam ] ) extends Matcher {
d61 1
d66 2
a67 1
class IntGreater( params: Seq[ NamedParam ] ) extends Matcher {
d81 1
d86 2
a87 1
class IntLess( params: Seq[ NamedParam ] ) extends Matcher {
d98 2
a99 1
class IntLessOrEqual( params: Seq[ NamedParam ] ) extends Matcher {
d105 2
a106 1
class IntGreaterOrEqual( params: Seq[ NamedParam ] ) extends Matcher {
d114 1
d119 2
a120 1
class RealEqual( params: Seq[ NamedParam ] ) extends Matcher {
d133 1
d138 2
a139 1
class RealNotEqual( params: Seq[ NamedParam ] ) extends Matcher {
d153 1
d158 2
a159 1
class RealGreater( params: Seq[ NamedParam ] ) extends Matcher {
d173 1
d178 2
a179 1
class RealLess( params: Seq[ NamedParam ] ) extends Matcher {
d190 2
a191 1
class RealLessOrEqual( params: Seq[ NamedParam ] ) extends Matcher {
d197 2
a198 1
class RealGreaterOrEqual( params: Seq[ NamedParam ] ) extends Matcher {
@
