head	1.4;
access;
symbols;
locks
	kyledewey:1.4; strict;
comment	@# @;


1.4
date	2011.06.08.04.25.53;	author kyledewey;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.25.20.14.06;	author kyledewey;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.11.05.47.27;	author kyledewey;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.26.04.04.04;	author kyledewey;	state Exp;
branches;
next	;


desc
@Matchers that perform operations on characters.
@


1.4
log
@Now conforms to the new Param interface.
@
text
@/*
 * Character.scala
 * 
 * Version:
 *     $Id: Character.scala,v 1.3 2011/05/25 20:14:06 kyledewey Exp $
 *
 * Revisions:
 *      $Log: Character.scala,v $
 *      Revision 1.3  2011/05/25 20:14:06  kyledewey
 *      Made it so the class name is also taken as a parameter.
 *
 *      Revision 1.2  2010/07/11 05:47:27  kyledewey
 *      Fixed bug in IsCharacter which made it always succeed
 *      if the input was a variable.
 *
 *      Revision 1.1  2010/06/26 04:04:04  kyledewey
 *      Initial revision
 *
 *
 */

package sentinel.model.matcher

import sentinel.model._
import sentinel.model.InstanceFactory._

/**
 * Holds helper routines for character
 * @@author Kyle Dewey
 */
object Character {
  def toChars( param: Seq[ Param ] ) =
    param.map( ( p: Param ) =>
      new java.lang.Character( p.sentCharValue ) )
}

import Character._

/**
 * Matcher that will determine if the given item is a character or not
 * @@param className The name of the class
 * @@param params Params to the matcher
 *        <ul><li>"character": any data</li></ul>
 * @@author Kyle Dewey
 */
class IsCharacter( val className: String,
		   val params: Seq[ NamedParam ] ) extends Matcher {
  private val character = param( "character", params )

  /**
   * Determines if the parameter is a character.
   * @@return true if it is, else false
   */
  override def matches() = {
    try {
      character.sentCharValue
      true
    } catch {
      case e: ValueException => false
    }
  }
}

/**
 * Matcher that will determine if the given character is an
 * letter character.
 * @@param className The name of the class
 * @@param params Params to the matcher
 * <ul><li>"character": the character to test</li></ul>
 * @@author Kyle Dewey
 */
class IsLetter( val className: String,
	        val params: Seq[ NamedParam ] ) extends Matcher {
  private val character = param( "character", params )

  /**
   * Determines if the given parameter is a letter.
   * this means it is something like a, b, c, etc.
   * @@return true if it is, else false
   */
  override def matches() =
    java.lang.Character.isLetter( character.sentCharValue )
}

/**
 * Matcher that will determine if the given character is a
 * whitespace character.
 * @@param className The name of the class
 * @@param params Params to the matcher
 * <ul><li>"character": the character to test</li></ul>
 * @@author Kyle Dewey
 */
class IsWhitespace( val className: String,
		    val params: Seq[ NamedParam ] ) extends Matcher {
  private val character = param( "character", params )

  /**
   * Determines if the given parameter is whitespace.
   * That means it's something like space, newline, tab, etc.
   * @@return true if it is whitespace, else false
   */
  override def matches() =
    java.lang.Character.isWhitespace( character.sentCharValue )
}

/**
 * Matcher that determines whether or not the given character is
 * uppercase.
 * @@param className The name of the class
 * @@param params Params to the matcher
 * <ul><li>"character": the characetr to test</li></ul>
 * @@author Kyle Dewey
 */
class IsUpperCase( val className: String,
		   val params: Seq[ NamedParam ] ) extends Matcher {
  private val character = param( "character", params )

  /**
   * Determines if the given parameter is uppercase.
   * That means it's something like A, B, C, etc.
   * @@return True if it is upper case, else false
   */
  override def matches() =
    java.lang.Character.isUpperCase( character.sentCharValue )
}

/**
 * Matcher that determines whether or not the given character is
 * lowercase.
 * @@param className The name of the class
 * @@param params Params to the matcher
 * <ul><li>"character": the characetr to test</li></ul>
 * @@author Kyle Dewey
 */
class IsLowerCase( val className: String,
		   val params: Seq[ NamedParam ] ) extends Matcher {
  private val character = param( "character", params )

  /**
   * Determines if the given parameter is lowercase.
   * That means it's something like A, B, C, etc.
   * @@return True if it is upper case, else false
   */
  override def matches() =
    java.lang.Character.isLowerCase( character.sentCharValue )
}

/**
 * Matcher that determines whether or not the given character is
 * a digit.
 * @@param className The name of the class
 * @@param Params to the matcher
 * <ul><li>"character": the character to test</li></ul>
 * @@author Kyle Dewey
 */
class IsDigit( val className: String,
	       val params: Seq[ NamedParam ] ) extends Matcher {
  private val character = param( "character", params )
  
  /**
   * Determines if the given parameter was a character.
   * That means it's something like 0, 1, 2, etc.
   * @@return true if it is a digit, else false
   */
  override def matches() =
    java.lang.Character.isDigit( character.sentCharValue )
}

/**
 * Matcher that determines whether or not the given character is
 * alphanumeric.  That is, it is either a letter or a digit.
 * @@param className The name of the class
 * @@param Params to the matcher
 * <ul><li>"character": the character to test</li></ul>
 * @@author Kyle Dewey
 */
class IsAlphaNumeric( val className: String,
		      val params: Seq[ NamedParam ] ) extends Matcher {
  private val character = param( "character", params )
  
  /**
   * Determines if the given parameter was alphanumeric.
   * That means it's something like 0, 1, 2, or a,b,c, etc.
   * @@return true if it is alphanumeric, else false
   */
  override def matches() =
    java.lang.Character.isLetterOrDigit( character.sentCharValue )
}

/**
 * Matcher that determines if a list of characters are all equal.
 * @@param className The name of the class
 * @@param params Params to the matcher
 * <ul><li>"characters": The characters to compare</li></ul>
 * @@author Kyle Dewey
 */
class CharEqual( val className: String,
		 val params: Seq[ NamedParam ] ) extends Matcher {
  private val characters = asArray( "characters", params )

  /**
   * Determines if the characters are all equal to each other.
   * @@return true if they are, else false
   */
  override def matches() =
    Matcher.allEqual( toChars( characters ) )
}

/**
 * Matcher that determines if a list of characters are all not equal.
 * @@param className The name of the class
 * @@param params Params to the matcher
 * <ul><li>"characters": The characters to compare</li></ul>
 * @@author Kyle Dewey
 */
class CharNotEqual( val className: String,
		    val params: Seq[ NamedParam ] ) extends Matcher {
  private val characters = asArray( "characters", params )

  /**
   * Determines if the characters are not equal to each other.
   * @@return true if they are not, else false
   */
  override def matches() =
    Matcher.allDifferent( toChars( characters ) )
}

/**
 * Matcher that determines if a list of characters all are less than
 * each other.  For instance, a < b < c is true.
 * @@param className The name of the class
 * @@param params Params to the matcher
  <ul><li>"characters": The characters to compare</li></ul>
 * @@author Kyle Dewey
 */
class CharLess( val className: String,
	        val params: Seq[ NamedParam ] ) extends Matcher {
  private val characters = asArray( "characters", params )

  /**
   * Determines if the characters are decreasing.
   * @@return true if they are, else false
   */
  override def matches() =
    Matcher.allLess( toChars( characters ) )
}

/**
 * Matcher that determines if a list of characters all are greater than
 * each other.  For instance, c > b > a is true.
 * @@param className The name of the class
 * @@param params Params to the matcher
  <ul><li>"characters": The characters to compare</li></ul>
 * @@author Kyle Dewey
 */
class CharGreater( val className: String,
		   val params: Seq[ NamedParam ] ) extends Matcher {
  private val characters = asArray( "characters", params )

  /**
   * Determines if the characters are increasing.
   * @@return true if they are, else false.
   */
  override def matches() =
    Matcher.allGreater( toChars( characters ) )
}

class CharLessOrEqual( val className: String,
		       val params: Seq[ NamedParam ] ) extends Matcher {
  private val characters = asArray( "characters", params )
  override def matches() =
    Matcher.allLessOrEqual( toChars( characters ) )
}

class CharGreaterOrEqual( val className: String,
			  val params: Seq[ NamedParam ] ) extends Matcher {
  private val characters = asArray( "characters", params )
  override def matches() =
    Matcher.allGreaterOrEqual( toChars( characters ) )
}
@


1.3
log
@Made it so the class name is also taken as a parameter.
@
text
@d5 1
a5 1
 *     $Id: Character.scala,v 1.2 2010/07/11 05:47:27 kyledewey Exp $
d9 3
d28 12
d48 1
a48 1
  private val character = param[ Data ]( "character", params )
d54 8
a61 2
  override def matches() = 
    character.data.length == 1 
d74 1
a74 1
  private val character = param[ SentChar ]( "character", params )
d82 1
a82 1
    Character.isLetter( character.value )
d95 1
a95 1
  private val character = param[ SentChar ]( "character", params )
d103 1
a103 1
    Character.isWhitespace( character.value )
d116 1
a116 1
  private val character = param[ SentChar ]( "character", params )
d124 1
a124 1
    Character.isUpperCase( character.value )
d137 1
a137 1
  private val character = param[ SentChar ]( "character", params )
d145 1
a145 1
    Character.isLowerCase( character.value )
d158 1
a158 1
  private val character = param[ SentChar ]( "character", params )
d166 1
a166 1
    Character.isDigit( character.value )
d179 1
a179 1
  private val character = param[ SentChar ]( "character", params )
d187 1
a187 1
    Character.isLetterOrDigit( character.value )
d199 1
a199 1
  private val characters = asArray[ SentChar ]( "characters", params )
d206 1
a206 1
    Matcher.allEqual( characters )
d218 1
a218 1
  private val characters = asArray[ SentChar ]( "characters", params )
d225 1
a225 1
    Matcher.allDifferent( characters )
d238 1
a238 1
  private val characters = asArray[ SentChar ]( "characters", params )
d245 1
a245 1
    Matcher.allLess( characters )
d258 1
a258 1
  private val characters = asArray[ SentChar ]( "characters", params )
d265 1
a265 1
    Matcher.allGreater( characters )
d270 1
a270 1
  private val characters = asArray[ SentChar ]( "characters", params )
d272 1
a272 1
    Matcher.allLessOrEqual( characters )
d277 1
a277 1
  private val characters = asArray[ SentChar ]( "characters", params )
d279 1
a279 1
    Matcher.allGreaterOrEqual( characters )
@


1.2
log
@Fixed bug in IsCharacter which made it always succeed
if the input was a variable.
@
text
@d5 1
a5 1
 *     $Id: Character.scala,v 1.1 2010/06/26 04:04:04 kyledewey Exp $
d9 4
d26 1
d31 2
a32 1
class IsCharacter( params: Seq[ NamedParam ] ) extends Matcher {
d46 1
d51 2
a52 1
class IsLetter( params: Seq[ NamedParam ] ) extends Matcher {
d67 1
d72 2
a73 1
class IsWhitespace( params: Seq[ NamedParam ] ) extends Matcher {
d88 1
d93 2
a94 1
class IsUpperCase( params: Seq[ NamedParam ] ) extends Matcher {
d109 1
d114 2
a115 1
class IsLowerCase( params: Seq[ NamedParam ] ) extends Matcher {
d130 1
d135 2
a136 1
class IsDigit( params: Seq[ NamedParam ] ) extends Matcher {
d151 1
d156 2
a157 1
class IsAlphaNumeric( params: Seq[ NamedParam ] ) extends Matcher {
d171 1
d176 2
a177 1
class CharEqual( params: Seq[ NamedParam ] ) extends Matcher {
d190 1
d195 2
a196 1
class CharNotEqual( params: Seq[ NamedParam ] ) extends Matcher {
d210 1
d215 2
a216 1
class CharLess( params: Seq[ NamedParam ] ) extends Matcher {
d230 1
d235 2
a236 1
class CharGreater( params: Seq[ NamedParam ] ) extends Matcher {
d247 2
a248 1
class CharLessOrEqual( params: Seq[ NamedParam ] ) extends Matcher {
d254 2
a255 1
class CharGreaterOrEqual( params: Seq[ NamedParam ] ) extends Matcher {
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 *     $Id$
d8 4
a11 1
 *      $Log$
d27 1
a27 1
  private val character = paramN( "character", params )
d33 2
a34 2
  override def matches() =
    ParamConverter.looksLikeSentChar( character.param )
@
