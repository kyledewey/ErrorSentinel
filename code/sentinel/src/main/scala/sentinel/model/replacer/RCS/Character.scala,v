head	1.4;
access;
symbols;
locks
	kyledewey:1.4; strict;
comment	@# @;


1.4
date	2011.06.08.04.26.15;	author kyledewey;	state Exp;
branches;
next	1.3;

1.3
date	2011.06.07.08.17.44;	author kyledewey;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.25.20.14.58;	author kyledewey;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.26.04.05.40;	author kyledewey;	state Exp;
branches;
next	;


desc
@Replacers that perform operations on characters.
@


1.4
log
@Now conforms to the new Param interface.
@
text
@/*
 * Character.scala
 *
 * Version:
 *     $Id: Character.scala,v 1.3 2011/06/07 08:17:44 kyledewey Exp kyledewey $
 *
 * Revisions:
 *      $Log: Character.scala,v $
 *      Revision 1.3  2011/06/07 08:17:44  kyledewey
 *      Added replacer types to nonpolymorphic routines.
 *
 *      Revision 1.2  2011/05/25 20:14:58  kyledewey
 *      Made it so the class name is also taken as a parameter.
 *
 *      Revision 1.1  2010/06/26 04:05:40  kyledewey
 *      Initial revision
 *
 *
 */

package sentinel.model.replacer

import sentinel.model._
import sentinel.model.matcher.Character._
import sentinel.model.Replacer._
import sentinel.model.InstanceFactory._

/**
 * Replacer that will make the given character uppercase.
 * @@param className The name of the class
 * @@param params Parameters for the replacer
 * <ul><li>"character": The character to make uppercase</li></ul>
 * @@author Kyle Dewey
 */
class CharMakeUpperCase( val className: String,
			 val params: Seq[ NamedParam ] ) extends Replacer {
  private val character = param( "character", params )

  /**
   * Makes the given character uppercase.
   * @@return The given character, uppercased
   */
  override def replace() =
    java.lang.Character.toUpperCase( character.sentCharValue )
}

/**
 * Replacer that will make the given character lowercase.
 * @@param className The name of the class
 * @@param params Parameters for the replacer
 * <ul><li>"character": The character to make lowercase</li></ul>
 * @@author Kyle Dewey
 */
class CharMakeLowerCase( val className: String,
			 val params: Seq[ NamedParam ] ) extends Replacer {
  private val character = param( "character", params )

  /**
   * Makes the given character lowercase.
   * @@return The given character, lowercased
   */
  override def replace() =
    java.lang.Character.toLowerCase( character.sentCharValue )
}

class CharMax( val className: String,
	       val params: Seq[ NamedParam ] ) extends Replacer {
  private val chars = asArray( "chars", params )
  override def replace() =
    Replacer.max( toChars( chars ) ).charValue
}

class CharMin( val className: String,
	       val params: Seq[ NamedParam ] ) extends Replacer {
  private val chars = asArray( "chars", params )
  override def replace() =
    Replacer.min( toChars( chars ) ).charValue
}
@


1.3
log
@Added replacer types to nonpolymorphic routines.
@
text
@d5 1
a5 1
 *     $Id: Character.scala,v 1.2 2011/05/25 20:14:58 kyledewey Exp $
d9 3
d24 1
d36 2
a37 2
			 val params: Seq[ NamedParam ] ) extends SentCharReplacer {
  private val character = param[ SentChar ]( "character", params )
d44 1
a44 1
    Character.toUpperCase( character.value )
d55 2
a56 2
			 val params: Seq[ NamedParam ] ) extends SentCharReplacer {
  private val character = param[ SentChar ]( "character", params )
d63 1
a63 1
    Character.toLowerCase( character.value )
d67 2
a68 2
	       val params: Seq[ NamedParam ] ) extends SentCharReplacer {
  private val chars = asArray[ SentChar ]( "chars", params )
d70 1
a70 1
    Replacer.max( chars )
d74 2
a75 2
	       val params: Seq[ NamedParam ] ) extends SentCharReplacer {
  private val chars = asArray[ SentChar ]( "chars", params )
d77 1
a77 1
    Replacer.min( chars )
@


1.2
log
@Made it so the class name is also taken as a parameter.
@
text
@d5 1
a5 1
 *     $Id: Character.scala,v 1.1 2010/06/26 04:05:40 kyledewey Exp $
d9 3
d32 1
a32 1
			 val params: Seq[ NamedParam ] ) extends Replacer {
d51 1
a51 1
			 val params: Seq[ NamedParam ] ) extends Replacer {
d63 1
a63 1
	       val params: Seq[ NamedParam ] ) extends Replacer {
d70 1
a70 1
	       val params: Seq[ NamedParam ] ) extends Replacer {
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 *     $Id$
d8 4
a11 1
 *      $Log$
d23 1
d28 2
a29 1
class CharMakeUpperCase( params: Seq[ NamedParam ] ) extends Replacer {
d42 1
d47 2
a48 1
class CharMakeLowerCase( params: Seq[ NamedParam ] ) extends Replacer {
d59 2
a60 1
class CharMax( params: Seq[ NamedParam ] ) extends Replacer {
d66 2
a67 1
class CharMin( params: Seq[ NamedParam ] ) extends Replacer {
@
