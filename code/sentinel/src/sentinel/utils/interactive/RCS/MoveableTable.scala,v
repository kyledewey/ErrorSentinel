head	1.2;
access;
symbols;
locks
	kyledewey:1.2; strict;
comment	@# @;


1.2
date	2011.05.31.18.44.46;	author kyledewey;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.31.00.08.17;	author kyledewey;	state Exp;
branches;
next	;


desc
@Holds code for a table whoose rows can be moved
via mouse presses.
@


1.2
log
@Now applies only to JTables.
Listener is automatically registered.
@
text
@/*
 * MoveableTable.scala
 *
 * Version:
 *     $Id: MoveableTable.scala,v 1.1 2011/05/31 00:08:17 kyledewey Exp $
 *
 * Revisions:
 *      $Log: MoveableTable.scala,v $
 *      Revision 1.1  2011/05/31 00:08:17  kyledewey
 *      Initial revision
 *
 *
 */

package sentinel.utils.interactive

import java.awt._
import java.awt.event._
import javax.swing._

/**
 * Something that watches for rows being moved.
 * @@author Kyle Dewey
 */
trait RowMover extends JTable {
  // begin constructor
  addMouseListener( makeRowMoverMouseListener )
  // end constructor

  /**
   * Makes the row mover mouse listener
   * @@return The row mover mouse listener
   */
  protected def makeRowMoverMouseListener() =
    new MouseListener() {
      // the row that is currently being dragged
      private var rowDragging: Option[ Int ] = None
      
      def mouseClicked( e: MouseEvent ) {}
      def mouseEntered( e: MouseEvent ) {}
      def mouseExited( e: MouseEvent ) {}
      def mousePressed( e: MouseEvent ) {
	val row = rowAtPoint( e.getPoint )
	rowDragging =
	  if ( row != -1 ) {
	    Some( row )
	  } else {
	    None
	  }
      }
      def mouseReleased( e: MouseEvent ) {
	lazy val oldRow = rowDragging.get
	lazy val newRow = rowAtPoint( e.getPoint )
	
	if ( rowDragging.isDefined &&
            newRow != -1 ) {
	  moveRow( oldRow, newRow )
	}
      }
    }

  /**
   * Moves the given row to the given position.
   * @@param row The row to move
   * @@param to Where to move the row
   */
  def moveRow( row: Int, to: Int ) {
    moveRows( row, row, to )
  }

  /**
   * Moves the given range of rows to the given location.
   * Note that the range is inclusive
   * @@param start The start of the range
   * @@param end The end of the range
   * @@param to Where to move the rows to
   */
  def moveRows( start: Int, end: Int, to: Int ): Unit
}
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 *     $Id$
d8 4
a11 1
 *      $Log$
d19 1
d25 34
a58 60
trait RowMover {
  /**
   * Gets the row that is at the given point.
   * @@param point The point
   * @@return The row at the given point.  Returns -1 if there isn't
   * a row at the given point
   */
  def rowAtPoint( point: Point ): Int

  /**
   * Moves the given range of rows to the given location.
   * Note that the range is inclusive
   * @@param start The start of the range
   * @@param end The end of the range
   * @@param to Where to move the rows to
   */
  def moveRows( start: Int, end: Int, to: Int ): Unit
}

/**
 * A special mouse listener for a JTable.
 * If a user clicks and drags a row across the table, the given row can
 * be moved.
 * @@param mover The row mover that performs actions on our behalf
 * @@author Kyle Dewey
 */
class MoveRowMouseListener( val mover: RowMover ) extends MouseListener {
  // the row that is currently being dragged
  private var rowDragging: Option[ Int ] = None

  /**
   * Doesn't actually do anything.
   * @@param e The event correlating to the click
   */
  def mouseClicked( e: MouseEvent ) {}

  /**
   * Doesn't actually do anything.
   * @@param e The event correlating to the mouse entering the component.
   */
  def mouseEntered( e: MouseEvent ) {}

  /**
   * Doesn't actually do anything.
   * @@param e The event correlating to the mouse exiting the component.
   */
  def mouseExited( e: MouseEvent ) {}

  /**
   * Records what row was clicked, in preparation for
   * moving a row.  This is needed for changing parameter order.
   * @@param e The event correlating to the mouse being pressed
   */
  def mousePressed( e: MouseEvent ) {
    val row = mover.rowAtPoint( e.getPoint )
    rowDragging =
      if ( row != -1 ) {
	Some( row )
      } else {
	None
d60 1
a60 1
  }
d68 1
a68 1
    mover.moveRows( row, row, to )
d72 5
a76 2
   * Tries to move the selected row, if that's possible.
   * @@param e The event correlating to the mouse being released
d78 1
a78 9
  def mouseReleased( e: MouseEvent ) {
    lazy val oldRow = rowDragging.get
    lazy val newRow = mover.rowAtPoint( e.getPoint )

    if ( rowDragging.isDefined &&
         newRow != -1 ) {
      moveRow( oldRow, newRow )
    }
  }
@
